### Spatial data in R
### Jacy Hyde


### This project will use classified landuse raster data and a
### polygon shapefile to create an output dataframe with by-pixel
### information about the location, year of deforestation, and 
### distance from the transmission line

install.packages("raster") #for reading, writing, analyzing, and modeling gridded spatial data
install.packages("rgdal") #read/write spatial objects, project data
install.packages("sp") #define data classes, some methods for visualizing, selecting, subsetting
install.packages("rgeos") #creates new geometries (buffers, distances, centroids, etc)
install.packages("dplyr") #data manipulation
install.packages("rasterVis") #data visualization for raster data

library(raster)
library(rgdal)
library(sp)
library(rgeos)
library(dplyr)
library(rasterVis)

# Import transmission line using readOGR from rgdal
# args: dsn= directory location, layer=layer name w/o extension
# Make sure to have full component of shapefiles in your directory 
ts_line <- readOGR(dsn = ".", layer= "NE_line1")

# Look at the file
class(ts_line)
### [1] "SpatialLinesDataFrame"
### attr(,"package")
### [1] "sp"

extent(ts_line)
# class       : Extent 
# xmin        : -51.34025 
# xmax        : -51.07553 
# ymin        : 0.0277314 
# ymax        : 0.8542698 

summary(ts_line)
# Object of class SpatialLinesDataFrame

crs(ts_line)
# CRS arguments:
# +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 
# THIS IS A GEOGRAPHIC COORDINATE SYSTEM: DOES NOT HAVE UNITS, USES THE 3D SPHERICAL SURFACE
# TO DETERMINE WHERE YOU ARE ON EARTH RATHER THAN PROJECTING IT ONTO A 2D PLANE
# CAN'T DO VERY MUCH ANALYSIS

#plot the data
plot(ts_line, col = "red", main = "Transmission Line")
#dev.print(pdf, "TransmissionLine.pdf")
# Save the plot as a pdf

# Project to UTM zone 23S 
# The initial CRS had no reference units, so it can't be used to create a buffer
line <- spTransform(ts_line, CRS("+init=epsg:29183")) 
# spTransform projects a spatial object
# the specified CRS code is the specific code for UTM23S

crs(line)
# CRS arguments:
#   +init=epsg:29183 +proj=utm +zone=23 +south +ellps=GRS67
# +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs 

# @ is used to let you look at attribute data of the spatial object
head(ts_line@data)

#create buffer
buffWidth <- 30000 #30km buffer
lineBuff <- gBuffer(line, width = buffWidth, byid= FALSE)
# gBuffer from rgeos
# Expands the geometry of the pbject to include the area within a specified distance
# Width is 30km
# byid= FALSE treats the file as one object around which to buffer, rather than individual lines

# can find the area of the buffer
# Units are in meters so need to convert to km2
# gArea from rgeos
area <- gArea(lineBuff)/1E6
area

# convert CRS geographic corrdinate system so it can be used to clip the raster
lineBuff <- spTransform(lineBuff, "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0" )
crs(lineBuff)
#CRS arguments:
#+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0 


#plot the buffer and the lines
plot(lineBuff, main = "30 km buffer around transmission line")
lines(ts_line, col = "green")
#dev.print(pdf, "Buffer.pdf")

######################################################################
# import raster
# Make sure you have all the necessary files!
# This raster shows year of deforestation for each pixel (1-14 = 2001-2014, 0 = still forest)
Hansen <- raster("./NE_HanAm.tif")

#view raster structure
Hansen
# class       : RasterLayer 
# dimensions  : 61088, 40000, 2443520000  (nrow, ncol, ncell)
# resolution  : 0.00025, 0.00025  (x, y)
# extent      : -60, -50, -10, 5.272  (xmin, xmax, ymin, ymax)
# coord. ref. : +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 
# data source : /Users/JacyHyde/Desktop/GIS_Project_new/NE_HanAm.tif 
# names       : NE_HanAm 
# values      : 0, 14  (min, max)

# Learn more exciting info about the raster
head(Hansen)
plot(Hansen)
#dev.print(pdf, "Hansen.pdf")
maxValue(Hansen)
#[1] 14
ncell(Hansen)
#[1] 2443520000
crs(Hansen)
# CRS arguments:
#   +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 

#######################################################################
#clip raster using the buffer
extent(Hansen)
Hansen_clip <- crop(Hansen, extent(lineBuff), snap= "out")
# Crop is from the raster package and returns a subset of an object as specified by 
# the extent- ie it only keeps the part of Hansen that overlaps with the buffer
# snap- include pixels that are only part way in the buffer
# does not conform to exact geometry
plot(Hansen_clip, main = "Result after applying crop")

# This function takes a while to run (~5min)
buf_raster <-rasterize(lineBuff, Hansen_clip)
# Transfers values associated with the buffer into raster cells.
# args are the input file and the raster 
plot(buf_raster, main = "Result after applying rasterize")

Hansen_buff <- mask(x=Hansen_clip, mask=buf_raster)
# creates a new raster object that has the same values as X
# except for the cells that are NA in a mask. These cells become NA. 
# args= x = the raster object
# mask= the other raster object

writeRaster(Hansen_buff, "hansen_buffer", "GTiff", overwrite= TRUE)
# save the raster as a GeoTiff file
# overwrite = TRUE overwrites the file each time if I change it

#plot with the ts line
plot(Hansen_buff, main = "30 km Buffer around Transmission Line")
lines(ts_line, col = "red")
#dev.print(pdf, "Buff_with_raster.pdf")

###########################################################################

#reimport raster/buffer so I don't have to rerun the previous functions every time
#Hansen_buff <- raster("./hansen_buffer.tif")

# Save the deforestation year and pixel ID as a dataframe
def_year_df <- as.data.frame(values(Hansen_buff))
head(def_year_df)

lat <- as.data.frame(init(Hansen_buff, 'x'))
long <- as.data.frame(init(Hansen_buff, 'y'))
# init creates a new raster layer with values reflecting a specified cell property, ie lat/long

#######################################################################
# Find the distance of the center of each pixel to the transmission line
# Convert raster to points in order to use gDisatance to find distance values
Hansen_points <-  as(Hansen_clip,"SpatialPoints")
# save it as a spatialPoints object
str(Hansen_points)
crs(Hansen_points)
# CRS arguments:
#   +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 

#need to reproject again to give them units for the distance function
Hansen_points <- spTransform(Hansen_points, CRS("+init=epsg:29183"))

crs(line)
# CRS arguments:
#   +init=epsg:29183 +proj=utm +zone=23 +south +ellps=GRS67
# +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs 
crs(Hansen_points)
# CRS arguments:
#   +init=epsg:29183 +proj=utm +zone=23 +south +ellps=GRS67
# +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs 

class(Hansen_points)

#takes ~30min to run
dist <-  gDistance(Hansen_points, line, byid=TRUE)

class(dist)
#finds the distance from every point to all 28 lines. Inputs are the two files 
# and buid= true- finds distance to each line

dim(dist)
#[1]       28 17440572
#there are 28 possible lines and 17440572 pixels - this found distance to EACH line

#find the minimum distance between the a pixel and the nearest line- reduce it to one value
dmin <- apply(dist, 2, min)
#returns an array of values by applying the designated function to a matrix


Hansen_buff[] <- dmin
#check to see if the values went into the raster
values(Hansen_buff)


plot(Hansen_buff, col= heat.colors(14), main = "Raster of Pixel Distance from Transmission Line")
lines(ts_line, col = "black")
#dev.print(pdf, "Buff_distance.pdf")

distance_df <- as.data.frame(values(Hansen_buff))
#save the values from the distance raster in dataframe format

################################################################
#cleaning the data

#bind two dataframes together
final_df <- cbind(distance_df, def_year_df, lat, long)
#cbind binds dataframes together

##name columns
colnames(final_df) = c("distance(m)", "year_def", "Lat", "Long")
head(final_df) #check

#remove NA values-
final_df <- na.omit(final_df)
#remove 0s, also still forested. na.omit removes rows with NA values
final_df <- filter(final_df, final_df[,2] != 0)
#filter is from dplyr, allows you to select data based on values
# [,2] (column 2) != is NOT EQUAL to 0

#save CSV file
write.csv(final_df, "Results.csv")

#turn a csv into a spatial object
coordinates(final_df) <- ~Long+Lat #columns that correspond to the lat/long in the csv
proj4string(final_df) = CRS("+proj=longlat +datum=WGS84") #geogrpahic cooridnate system
#don't use projected yet, becuase it needs to read using lat/long first. You can project after
class(final_df)

plot(final_df)

