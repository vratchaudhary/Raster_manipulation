{
    "collab_server" : "",
    "contents" : "\n##This script is for using landscape raster data and shpfile\n##to get by pixl information about the data characteristics-like year of deforestation etc\n#install.packages(\"raster\") #for reading, writing, analyzing, and modeling spatial data\n#install.packages(\"rgdal\") #read/write spatial objects, project data\n#install.packages(\"sp\") #define data classes, some methods for visualizing, selecting, subsetting\n#install.packages(\"rgeos\") #creates new geometries \n#install.packages(\"dplyr\") #data wrangling\n#install.packages(\"rasterVis\") #visualization \nlibrary(raster)\nlibrary(rgdal)\nlibrary(sp)\nlibrary(rgeos)\nlibrary(dplyr)\nlibrary(rasterVis)\n# Importing transmission line using readOGR from rgdal\n\nts_line <- readOGR(dsn = \".\", layer= \"NE_line1\")\n##look at the line\nclass(ts_line)\n##lets look at its summary\nsummary(ts_line)\n##letsplot it\nplot(ts_line)\n##look at its projection\ncrs(ts_line)\n#########we would like to bring this projection to UTM 235\nline <- spTransform(ts_line, CRS(\"+init=epsg:29183\")) \n###########Now we will create the buffer of 20 km around the line\nbuff<- 2000\nlinebuff<- gBuffer(line, width=buff, byid=F)\n###############\nplot(lineBuff)\n############\n#################lets import the raster \n# This raster shows year of deforestation for each pixel (1-14 = 2001-2014, 0 = still forest)\nHan <- raster(\"./NE_HanAm.tif\")\n##lets look at it\nHan\n##lets plot it\nplot(Han)\n######lets bring raster and buffer to same co-ord system and clip raster to buffer\nlineBuff <- spTransform(lineBuff, \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\" )\ncrs(lineBuff)\n####################\nHan_clip <- crop(Han, extent(lineBuff), snap= \"out\")\nplot(Han_clip, main = \"Result after applying crop\")\n##########\nHansen_buff <- mask(x=Han_clip, mask=buf_raster)\n# creates a new raster object that has the same values as X\nwriteRaster(Hansen_buff, \"hansen_buffer\", \"GTiff\", overwrite= TRUE)\n# save the raster as a GeoTiff file\n#plot with the ts line\nplot(Hansen_buff, main = \"20 km Buffer around Transmission Line\")\nlines(ts_line, col = \"red\")\n# Save the deforestation year and pixel ID as a dataframe\ndef_year_df <- as.data.frame(values(Hansen_buff))\nhead(def_year_df)\n\nlat <- as.data.frame(init(Hansen_buff, 'x'))\nlong <- as.data.frame(init(Hansen_buff, 'y'))\n# init creates a new raster layer with values reflecting a specified cell property, ie lat/long\n# Find the distance of the center of each pixel to the transmission line\n# Convert raster to points in order to use gDisatance to find distance values\nHan_points <-  as(Hansen_clip,\"SpatialPoints\")\n# save it as a spatialPoints object\nstr(Han_points)\ncrs(Han_points)\n\nHan_points <- spTransform(Han_points, CRS(\"+init=epsg:29183\"))\n\ncrs(line)\ncrs(Han_points)\n\nclass(Han_points)\n\n#takes ~30min to run\ndist <-  gDistance(Han_points, line, byid=TRUE)\n\nclass(dist)\n#finds the distance from every point to all 28 lines. Inputs are the two files \n# and buid= true- finds distance to each line\n\ndim(dist)\n#[1]       28 17440572\n#there are 28 possible lines and 17440572 pixels - this found distance to EACH line\n\n#find the minimum distance between the a pixel and the nearest line- reduce it to one value\ndmin <- apply(dist, 2, min)\n#returns an array of values by applying the designated function to a matrix\n\n\nHan_buff[] <- dmin\n#check to see if the values went into the raster\nvalues(Hansen_buff)\n\n\nplot(Han_buff, col= heat.colors(14), main = \"Raster of Pixel Distance from Transmission Line\")\nlines(ts_line, col = \"black\")\n#dev.print(pdf, \"Buff_distance.pdf\")\n\ndistance_df <- as.data.frame(values(Han_buff))\n#save the values from the distance raster in dataframe format\n\n################################################################\n#cleaning the data\n\n#bind two dataframes together\nfinal_df <- cbind(distance_df, def_year_df, lat, long)\n#cbind binds dataframes together\n\n##name columns\ncolnames(final_df) = c(\"distance(m)\", \"year_def\", \"Lat\", \"Long\")\nhead(final_df) #check\n\n#remove NA values-\nfinal_df <- na.omit(final_df)\n#remove 0s, also still forested. na.omit removes rows with NA values\nfinal_df <- filter(final_df, final_df[,2] != 0)\n\n#save CSV file\nwrite.csv(final_df, \"Results.csv\")\n\n##how to make spatial data from a csv file\n#turn a csv into a spatial object\ncoordinates(final_df) <- ~Long+Lat #columns that correspond to the lat/long in the csv\nproj4string(final_df) = CRS(\"+proj=longlat +datum=WGS84\") #geogrpahic cooridnate system\n\nclass(final_df)\n\nplot(final_df)\n",
    "created" : 1549985239210.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1348097002",
    "id" : "C302B1EF",
    "lastKnownWriteTime" : 1549987942,
    "last_content_update" : 1549987942578,
    "path" : "~/Dropbox/R  group/Spatial data/data/Raster_manipulation.R",
    "project_path" : "Raster_manipulation.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}